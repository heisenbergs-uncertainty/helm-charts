# Default values for iotgo-app.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

# -- Backend application settings
backend:
  image:
    repository: your-artifactory-registry/iotgo-backend # <<-- UPDATE THIS with your JFrog Artifactory Registry and repository name
    tag: latest # or use a specific SHA like from github.sha
    pullPolicy: IfNotPresent

  service:
    type: ClusterIP
    port: 8080 # Internal port the backend listens on

  # Environment variables for the backend (e.g., database connection, secrets)
  # Database credentials will be loaded from a Kubernetes Secret named 'iotgo-db-secrets'
  # Application secrets (JWT, Session) will be loaded from 'iotgo-app-secrets'
  env:
    RUNMODE: prod
    DB_HOST: db-service # Assuming your PostgreSQL service is named 'db-service' or similar in Kubernetes
    DB_USER_KEY: DB_USER # Key in 'iotgo-db-secrets' for DB_USER
    DB_PASSWORD_KEY: DB_PASSWORD # Key in 'iotgo-db-secrets' for DB_PASSWORD
    DB_NAME_KEY: DB_NAME # Key in 'iotgo-db-secrets' for DB_NAME
    DB_PORT_KEY: DB_PORT # Key in 'iotgo-db-secrets' for DB_PORT

# -- Frontend application settings
frontend:
  image:
    repository: your-artifactory-registry/iotgo-frontend # <<-- UPDATE THIS with your JFrog Artifactory Registry and repository name
    tag: latest # or use a specific SHA like from github.sha
    pullPolicy: IfNotPresent

  service:
    type: ClusterIP
    port: 80 # Internal port the frontend (Nginx) listens on

  # Environment variables for the frontend
  env:
    VITE_API_URL: http://backend-service:8080 # Assuming backend service is named 'backend-service'
    VITE_AUTH_URL: http://backend-service:8080 # Assuming backend service is named 'backend-service'

# -- Ingress settings for external access
ingress:
  enabled: true
  className: nginx # Use 'nginx' for Nginx Ingress Controller
  annotations:
    # kubernetes.io/ingress.class: nginx # Uncomment if not using ingressClassName
    # cert-manager.io/cluster-issuer: "letsencrypt-prod" # Uncomment if using cert-manager
  hosts:
    - host: iotgo.example.com # <<-- UPDATE THIS with your domain
      paths:
        - path: /
          pathType: ImplementationSpecific
          service: frontend-service # Maps to frontend service
          port: 80
        - path: /api # Maps to backend API endpoints
          pathType: ImplementationSpecific
          service: backend-service # Maps to backend service
          port: 8080
        - path: /auth # Maps to backend authentication endpoints
          pathType: ImplementationSpecific
          service: backend-service # Maps to backend service
          port: 8080

  tls: [] # Example: - secretName: iotgo-tls-secret, hosts: [iotgo.example.com]

# -- Kubernetes Secret names (referencing secrets that you must create separately)
secrets:
  dbSecretName: iotgo-db-secrets # Name of the K8s Secret holding DB credentials
  appSecretName: iotgo-app-secrets # Name of the K8s Secret holding JWT/Session secrets

# -- Resources for pods (optional)
resources:
  {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts will run on environments with little
  # resources, such as Minikube.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi
